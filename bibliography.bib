
@article{cohen_cubical_2016,
	title = {Cubical {Type} {Theory}: a constructive interpretation of the univalence axiom},
	shorttitle = {Cubical {Type} {Theory}},
	url = {http://arxiv.org/abs/1611.02108},
	abstract = {This paper presents a type theory in which it is possible to directly manipulate \$n\$-dimensional cubes (points, lines, squares, cubes, etc.) based on an interpretation of dependent type theory in a cubical set model. This enables new ways to reason about identity types, for instance, function extensionality is directly provable in the system. Further, Voevodsky's univalence axiom is provable in this system. We also explain an extension with some higher inductive types like the circle and propositional truncation. Finally we provide semantics for this cubical type theory in a constructive meta-theory.},
	urldate = {2021-03-28},
	journal = {arXiv:1611.02108 [cs, math]},
	author = {Cohen, Cyril and Coquand, Thierry and Huber, Simon and Mörtberg, Anders},
	month = nov,
	year = {2016},
	note = {arXiv: 1611.02108},
	keywords = {Computer Science - Logic in Computer Science, Mathematics - Logic, F.3.2, F.4.1, school::ens::mpri::stagem2, read},
	file = {arXiv Fulltext PDF:/home/luc/data/annex/papers/storage/5N5VN7TD/Cohen et al. - 2016 - Cubical Type Theory a constructive interpretation.pdf:application/pdf;arXiv.org Snapshot:/home/luc/data/annex/papers/storage/SZG74JAH/1611.html:text/html},
}

@article{voevodsky_simple_2013,
	title = {A simple type system with two identity types},
	abstract = {We call this system and its further extensions HTS for ”homotopy type system”. It is an
extension of the Martin-Lof type system with some additional constructs which reflect the
structures which exist in the target of the canonical univalent model of the Martin-Lof},
	author = {Voevodsky, Vladimir},
	month = feb,
	year = {2013},
	keywords = {school::ens::mpri::stagem2},
	file = {Voevodsky - 2013 - A simple type system with two identity types.pdf:/home/luc/data/annex/papers/storage/VXP3QHZG/Voevodsky - 2013 - A simple type system with two identity types.pdf:application/pdf},
}

@inproceedings{winterhalter_eliminating_2019,
	address = {New York, NY, USA},
	series = {{CPP} 2019},
	title = {Eliminating reflection from type theory},
	isbn = {978-1-4503-6222-1},
	url = {https://doi.org/10.1145/3293880.3294095},
	doi = {10.1145/3293880.3294095},
	abstract = {Type theories with equality reflection, such as extensional type theory (ETT), are convenient theories in which to formalise mathematics, as they make it possible to consider provably equal terms as convertible. Although type-checking is undecidable in this context, variants of ETT have been implemented, for example in NuPRL and more recently in Andromeda. The actual objects that can be checked are not proof-terms, but derivations of proof-terms. This suggests that any derivation of ETT can be translated into a typecheckable proof term of intensional type theory (ITT). However, this result, investigated categorically by Hofmann in 1995, and 10 years later more syntactically by Oury, has never given rise to an effective translation. In this paper, we provide the first effective syntactical translation from ETT to ITT with uniqueness of identity proofs and functional extensionality. This translation has been defined and proven correct in Coq and yields an executable plugin that translates a derivation in ETT into an actual Coq typing judgment. Additionally, we show how this result is extended in the context of homotopy type theory to a two-level type theory.},
	urldate = {2021-03-28},
	booktitle = {Proceedings of the 8th {ACM} {SIGPLAN} {International} {Conference} on {Certified} {Programs} and {Proofs}},
	publisher = {Association for Computing Machinery},
	author = {Winterhalter, Théo and Sozeau, Matthieu and Tabareau, Nicolas},
	month = jan,
	year = {2019},
	keywords = {school::ens::mpri::stagem2, dependent types, formalisation, translation, read},
	pages = {91--103},
	file = {Full Text PDF:/home/luc/data/annex/papers/storage/4B9YXBTG/Winterhalter et al. - 2019 - Eliminating reflection from type theory.pdf:application/pdf},
}

@misc{assaf_dedukti_2016,
	title = {Dedukti : a {Logical} {Framework} based on the λ Π-{Calculus} {Modulo} {Theory}},
	shorttitle = {Dedukti},
	url = {https://www.semanticscholar.org/paper/Dedukti-%3A-a-Logical-Framework-based-on-the-%CE%BB-Modulo-Assaf-Burel/87b5ba1a4b1270d0e69c6cd1f79f2e8dee81a63f},
	abstract = {Dedukti is a Logical Framework based on the λΠ-Calculus Modulo Theory. We show that many theories can be expressed in Dedukti: constructive and classical predicate logic, Simple type theory, programming languages, Pure type systems, the Calculus of inductive constructions with universes, etc. and that permits to used it to check large libraries of proofs developed in other proof systems: Zenon, iProver, FoCaLiZe, HOL Light, and Matita.},
	language = {en},
	urldate = {2021-03-28},
	author = {Assaf, Ali and Burel, G. and Cauderlier, Raphaël and Delahaye, D. and Dowek, Gilles and Dubois, Catherine and Gilbert, F. and Halmagrand, Pierre and Hermant, O. and Saillard, Ronan},
	year = {2016},
	keywords = {school::ens::mpri::stagem2, read},
	file = {Snapshot:/home/luc/data/annex/papers/storage/TERXTG9J/87b5ba1a4b1270d0e69c6cd1f79f2e8dee81a63f.html:text/html;Assaf et al. - 2016 - Dedukti  a Logical Framework based on the λ Π-Cal.pdf:/home/luc/data/annex/papers/storage/PNPTI7GK/Assaf et al. - 2016 - Dedukti  a Logical Framework based on the λ Π-Cal.pdf:application/pdf},
}

@article{kraus_internal_2021,
	title = {Internal \${\textbackslash}infty\$-{Categorical} {Models} of {Dependent} {Type} {Theory}: {Towards} {2LTT} {Eating} {HoTT}},
	shorttitle = {Internal \${\textbackslash}infty\$-{Categorical} {Models} of {Dependent} {Type} {Theory}},
	url = {http://arxiv.org/abs/2009.01883},
	abstract = {Using dependent type theory to formalise the syntax of dependent type theory is a very active topic of study and goes under the name of "type theory eating itself" or "type theory in type theory." Most approaches are at least loosely based on Dybjer's categories with families (CwF's) and come with a type CON of contexts, a type family TY indexed over it modelling types, and so on. This works well in versions of type theory where the principle of unique identity proofs (UIP) holds. In homotopy type theory (HoTT) however, it is a long-standing and frequently discussed open problem whether the type theory "eats itself" and can serve as its own interpreter. The fundamental underlying difficulty seems to be that categories are not suitable to capture a type theory in the absence of UIP. In this paper, we develop a notion of \${\textbackslash}infty\$-categories with families (\${\textbackslash}infty\$-CwF's). The approach to higher categories used relies on the previously suggested semi-Segal types, with a new construction of identity substitutions that allow for both univalent and non-univalent variations. The type-theoretic universe as well as the internalised syntax are models, although it remains a conjecture that the latter is initial. To circumvent the known unsolved problem of constructing semisimplicial types, the definition is presented in two-level type theory (2LTT). Apart from introducing \${\textbackslash}infty\$-CwF's, the paper explains the shortcomings of 1-categories in type theory without UIP as well as the difficulties of and approaches to internal higher-dimensional categories.},
	urldate = {2021-04-01},
	journal = {arXiv:2009.01883 [cs, math]},
	author = {Kraus, Nicolai},
	month = jan,
	year = {2021},
	note = {arXiv: 2009.01883},
	keywords = {Computer Science - Logic in Computer Science, Mathematics - Logic, F.4.1, school::ens::mpri::stagem2, Mathematics - Category Theory},
	file = {arXiv Fulltext PDF:/home/luc/data/annex/papers/storage/HLJSFCD3/Kraus - 2021 - Internal \$infty\$-Categorical Models of Dependent .pdf:application/pdf;arXiv.org Snapshot:/home/luc/data/annex/papers/storage/MZX4CTUL/2009.html:text/html},
}

@book{megill_metamath_2019,
	address = {Place of publication not identified},
	title = {Metamath: {A} {Computer} {Language} for {Mathematical} {Proofs}},
	isbn = {978-0-359-70223-7},
	shorttitle = {Metamath},
	abstract = {Metamath is a computer language and an associated computer program for archiving, verifying, and studying mathematical proofs. The Metamath language is simple and robust, with an almost total absence of hard-wired syntax, and we believe that it provides about the simplest possible framework that allows essentially all of mathematics to be expressed with absolute rigor. While simple, it is also powerful; the Metamath Proof Explorer (MPE) database has over 23,000 proven theorems and is one of the top systems in the ?Formalizing 100 Theorems? challenge. This book explains the Metamath language and program, with specific emphasis on the fundamentals of the MPE database.},
	language = {English},
	publisher = {Lulu.com},
	author = {Megill, Norman and Wheeler, David A.},
	month = jun,
	year = {2019},
	keywords = {school::ens::mpri::stagem2, toread},
	file = {Megill and Wheeler - 2019 - Metamath A Computer Language for Mathematical Pro.pdf:/home/luc/data/annex/papers/storage/ADCD35BH/Megill and Wheeler - 2019 - Metamath A Computer Language for Mathematical Pro.pdf:application/pdf},
}

@article{annenkov_two-level_2019,
	title = {Two-{Level} {Type} {Theory} and {Applications}},
	url = {http://arxiv.org/abs/1705.03307},
	abstract = {We define and develop two-level type theory (2LTT), a version of Martin-L{\textbackslash}"of type theory which combines two different type theories. We refer to them as the inner and the outer type theory. In our case of interest, the inner theory is homotopy type theory (HoTT) which may include univalent universes and higher inductive types. The outer theory is a traditional form of type theory validating uniqueness of identity proofs (UIP). One point of view on it is as internalised meta-theory of the inner type theory. There are two motivations for 2LTT. Firstly, there are certain results about HoTT which are of meta-theoretic nature, such as the statement that semisimplicial types up to level \$n\$ can be constructed in HoTT for any externally fixed natural number \$n\$. Such results cannot be expressed in HoTT itself, but they can be formalised and proved in 2LTT, where \$n\$ will be a variable in the outer theory. This point of view is inspired by observations about conservativity of presheaf models. Secondly, 2LTT is a framework which is suitable for formulating additional axioms that one might want to add to HoTT. This idea is heavily inspired by Voevodsky's Homotopy Type System (HTS), which constitutes one specific instance of a 2LTT. HTS has an axiom ensuring that the type of natural numbers behaves like the external natural numbers, which allows the construction of a universe of semisimplicial types. In 2LTT, this axiom can be stated simply be asking the inner and outer natural numbers to be isomorphic. After defining 2LTT, we set up a collection of tools with the goal of making 2LTT a convenient language for future developments. As a first such application, we develop the theory of Reedy fibrant diagrams in the style of Shulman. Continuing this line of thought, we suggest a definition of (infinity,1)-category and give some examples.},
	urldate = {2021-06-28},
	journal = {arXiv:1705.03307 [cs]},
	author = {Annenkov, Danil and Capriotti, Paolo and Kraus, Nicolai and Sattler, Christian},
	month = dec,
	year = {2019},
	note = {arXiv: 1705.03307},
	keywords = {Computer Science - Logic in Computer Science, F.4.1, school::ens::mpri::stagem2, reading},
	file = {arXiv Fulltext PDF:/home/luc/data/annex/papers/storage/5T46PH69/Annenkov et al. - 2019 - Two-Level Type Theory and Applications.pdf:application/pdf;arXiv.org Snapshot:/home/luc/data/annex/papers/storage/52X8QVJC/1705.html:text/html},
}

@inproceedings{oury_extensionality_2005,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Extensionality in the {Calculus} of {Constructions}},
	isbn = {978-3-540-31820-0},
	doi = {10.1007/11541868_18},
	abstract = {This paper presents a method to translate a proof in an extensional version of the Calculus of Constructions into a proof in the Calculus of Inductive Constructions extended with a few axioms. We use a specific equality in order to translate the extensional conversion relation into an intensional system.},
	language = {en},
	booktitle = {Theorem {Proving} in {Higher} {Order} {Logics}},
	publisher = {Springer},
	author = {Oury, Nicolas},
	editor = {Hurd, Joe and Melham, Tom},
	year = {2005},
	keywords = {school::ens::mpri::stagem2},
	pages = {278--293},
	file = {Springer Full Text PDF:/home/luc/data/annex/papers/storage/7RL2WWHF/Oury - 2005 - Extensionality in the Calculus of Constructions.pdf:application/pdf},
}
